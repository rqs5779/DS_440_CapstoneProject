# -*- coding: utf-8 -*-
"""dataset_netflix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rOwM2AvisJVFljXyMjhozWOBVXpPHaSa
"""

import pandas as pd
import numpy as np

# preprocessing dataset -RS
col_list = ["type", "rating", "title"]
dataframe = pd.read_csv("/Users/raymond/Desktop/Capstone Project/netflix_titles.csv", usecols=col_list)
ratings = ['TV-MA', 'TV-14', 'TV-PG', 'TV', 'R', 'PG-13', 'TV-Y']
df = dataframe[dataframe['rating'].isin(ratings)]
print(df.head())



print(df['type'].value_counts())

print(df['rating'].value_counts())

# !pip install neattext

import neattext.functions as nfx

# df['title'] = df['title'].nfx.lower()
df['title'] = df['title'].str.lower()

df['title'] = df['title'].apply(nfx.remove_stopwords)
df['title'] = df['title'].apply(nfx.remove_puncts)

df.head()

from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.multioutput import MultiOutputClassifier

Xfeatures = df['title']
ylabels = df[['type','rating']]

x_train,x_test,y_train,y_test = train_test_split(Xfeatures,ylabels,test_size=0.3,random_state=7)

from sklearn.pipeline import Pipeline

pipe_lr = Pipeline(steps=[('cv',CountVectorizer()),
                          ('lr_multi',MultiOutputClassifier(LogisticRegression()))])

pipe_lr.fit(x_train,y_train)


print(pipe_lr.score(x_test,y_test))


# print(x_test.iloc[0])
# print("Actual Prediction:",y_test.iloc[0])

# pred1 = x_test.iloc[0]

# pred1

# pipe_lr.predict([pred1])

# print(pipe_lr.classes_)
# pipe_lr.predict_proba([pred1])

# print(pred1)

# from sklearn.metrics import confusion_matrix
# pipe_lr = Pipeline(steps=[('cv',CountVectorizer()),
#                           ('lr_multi',MultiOutputClassifier(LogisticRegression()))])
# pipe_lr.fit(x_train,y_train)
# y_pred = pipe_lr.predict(x_test)
# print(y_test)
# print(y_test.value_counts())
# print(y_pred)

# ! pip install category_encoders
# author Zihan Luo
# import category_encoders as ce
# le = ce.OneHotEncoder(return_df=False, handle_unknown="ignore")
# y_fitedpred = le.fit_transform(y_pred)
# y_fitedtest = le.fit_transform(y_test)
# cm = confusion_matrix(y_fitedtest.argmax(axis=1), y_fitedpred.argmax(axis=1))
# print(cm)
